/*
 * @Author: WÂ·S
 * @Date: 2022-09-08 14:13:17
 * @LastEditors: huangyuexia
 * @LastEditTime: 2023-08-14 10:10:50
 * @Description: Description
 */

import { fetcher } from '@/lib/axios';
import {
  legacyLogicalPropertiesTransformer,
  StyleProvider,
} from '@ant-design/cssinjs';
import { ConfigProvider } from 'antd';
import 'antd/dist/reset.css';
import type { ConfigProviderProps } from 'antd/lib/config-provider';
import enUS from 'antd/locale/en_US';
import zhCN from 'antd/locale/zh_CN';
import 'dayjs/locale/zh-cn';
import { ErrorBoundary, useHook } from 'libs/components';
import { appWithTranslation } from 'next-i18next';
import type { AppProps, NextWebVitalsMetric } from 'next/app';
import type { NextRouter } from 'next/dist/client/router';
import Head from 'next/head';
import type { NextPage } from 'next/types';
import { ReactElement, ReactNode } from 'react';
import { SWRConfig } from 'swr';
import '../style/tailwindcss.css';
// import { NotificationRespVo } from 'types/models';
// let time = null;
type NextPageWithLayout<P = object, IP = P> = NextPage<P, IP> & {
  getLayout?: (page: ReactElement) => ReactNode;
  hideMenu?: boolean;
};

type AppPropsWithLayout = AppProps & {
  Component: NextPageWithLayout;
};

const MyApp = ({ Component, pageProps }: AppPropsWithLayout) => {
  const getLayout = Component?.getLayout || ((page: JSX.Element) => page);
  const { t, router } = useHook();
  return (
    <div>
      <Head>
        <meta charSet="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
        <title>
          POC6-Enabling Gasless Transactions Using Public Chain-based
          Stablecoins
        </title>
      </Head>
      <StyleProvider
        hashPriority="high"
        transformers={[legacyLogicalPropertiesTransformer]}
      >
        <ConfigProvider {...getConfigProvider(router, t)}>
          <SWRConfig value={{ fetcher }}>
            <ErrorBoundary>
              {getLayout(<Component {...pageProps} />)}
            </ErrorBoundary>
          </SWRConfig>
        </ConfigProvider>
      </StyleProvider>
    </div>
  );
};

export default appWithTranslation(MyApp);

export function reportWebVitals(metric: NextWebVitalsMetric) {
  console.log(metric);
}

function getConfigProvider(
  router: NextRouter,
  t: (str: string) => string
): ConfigProviderProps {
  return {
    locale: router.locale === 'en-US' ? enUS : zhCN,
    form: {
      validateMessages: {
        required: t('PUB_Pleased').replace('****', '${label}'),
        pattern: {
          mismatch: t('PUB_Correct').replace('****', '${label}'),
        },
        types: {
          email: t('PUB_Correct').replace('****', '${label}'),
          array: t('PUB_Select').replace('****', '${label}'),
        },
        enum: t('PUB_Select').replace('****', '${label}'),
      },
    },
    theme: {
      token: {
        colorPrimary: '#63B5D0',
        fontSize: 14,
        borderRadius: 6,
        margin: 16,
        padding: 16,
      },
      components: {
        Table: {
          colorFillAlter: '#F0F0F0',
        },
        Form: {
          fontSize: 14,
        },
      },
    },
  };
}
